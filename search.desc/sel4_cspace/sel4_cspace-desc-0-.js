searchState.loadedDescShard("sel4_cspace", 0, "兼容c风格的接口，后续会删除\n需要外部实现的接口\n暴露给外部的接口\nCap 在内核态中的种类枚举\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJudge whether the zombie cap is from tcb cap.\n将一个cap插入slot中并维护能力派生树\n将一个cap插入slot中并删除原节点\n交换两个slot，并将新的cap数据填入\n由cap_t和 mdb_node …\n将当前的<code>cte slot</code>中的能力清除，因为可能是…\n将当前的<code>cte slot</code>中的能力清除,要求<code>cap</code>…\n判断当前<code>cte</code>是否存在派生出来的子节点\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ninsert a new cap to slot, set parent’s next is slot.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n判断当前<code>cte</code>…\n从cspace寻址特定的slot\nCheck whether two caps point to the same kernel object, if …")